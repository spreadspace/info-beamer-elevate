# # #!/usr/bin/python
# from . import importer
# from .hosted import CONFIG
# from .hosted import NODE
import importer
from hosted import CONFIG
from hosted import NODE

from calendar import timegm
from datetime import datetime

import json
import os
import pytz
import sys
import time


CONFIG.restart_on_update()


def __get_now_in_config_tz(now):
    now = now.replace(tzinfo=pytz.utc)
    return now.astimezone(pytz.timezone(CONFIG['timezone']))


def current_time():
    now = datetime.utcnow()
    timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
    return now, timestamp


def send_clock(now, ts):
    now = __get_now_in_config_tz(now)
    NODE.send(
        '/clock/set:%f,%d,%d,%d' % (
            ts,
            now.hour,
            now.minute,
            now.second
        )
    )


def send_animation_timer_reset():
    NODE.send('/animation-time/reset')


def main():
    now, ts = current_time()
    last_animation_time_reset = now
    while 1:

        schedule = importer.get_schedule(
            CONFIG['eis_api_url'],
            CONFIG['tracks'],
            CONFIG['locations'],
            CONFIG['devices'],
            pytz.timezone(CONFIG['timezone'])
        )

        if not schedule:
            print >>sys.stderr, "no events"
            time.sleep(60)
            continue

        with file("schedule.json.new", "wb") as f:
            f.write(json.dumps(schedule, indent=2).encode('utf8'))
        os.rename("schedule.json.new", "schedule.json")

        print >>sys.stderr, "updated schedule"

        # 6*60 times 10s (aka 1 hour of only updating the time but not
        # re-downloading the schdule)
        for i in xrange(6*60):  # TODO: ok?
            now, ts = current_time()
            print >>sys.stderr, "time is", now, ts
            send_clock(now, ts)
            time.sleep(10)

        # reset animation time if it's around 6 o'clock and the last reset
        # was at least 22 hours (aka 80000 seconds) ago
        since = now - last_animation_time_reset
        if __get_now_in_config_tz(now).hour == 6\
                and since.total_seconds() > 80000:
            print >>sys.stderr, "trigger reset of animation time"
            send_animation_timer_reset()


if __name__ == "__main__":
    main()
