#!/usr/bin/python
import os
import sys
import time
import pytz
import json
from calendar import timegm
from datetime import datetime

from hosted import CONFIG, NODE
import importer

CONFIG.restart_on_update()

diff = datetime(2014, 7, 22, 8, 20, 00) - datetime.utcnow()


def current_time():
    now = datetime.utcnow()  # + diff
    timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
    return now, timestamp


def send_clock(now, ts):
    NODE.send('/clock/set:%f' % ts)


def main():
    while 1:
        now, ts = current_time()
        if now.year < 2000:
            print >>sys.stderr, "too soon"
            time.sleep(1)
            continue

        schedule = importer.get_schedule(
            CONFIG['eis_api_url'],
            CONFIG['tracks'],
            CONFIG['locations'],
            CONFIG['devices'],
            pytz.timezone(CONFIG['timezone'])
        )

        if not schedule:
            print >>sys.stderr, "no events"
            time.sleep(60)
            continue

        with file("schedule.json.new", "wb") as f:
            f.write(json.dumps(schedule, indent=2).encode('utf8'))
        os.rename("schedule.json.new", "schedule.json")

        print >>sys.stderr, "updated schedule"

        for i in xrange(60):
            now, ts = current_time()
            print >>sys.stderr, "time is", now, ts
            send_clock(now, ts)
            time.sleep(10)

if __name__ == "__main__":
    main()
